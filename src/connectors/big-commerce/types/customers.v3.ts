/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/customers": {
    /**
     * Returns a list of Customers. Optional filter parameters can be passed in.
     *
     * **Notes**
     *
     * Attribute names are not available on the customer object.
     */
    get: operations["CustomersGet"];
    /**
     * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer* This must be included in the request body
     *
     * **Read Only Fields**
     * * id
     * * registration_ip_address
     * * date_created
     * * date_modified
     *
     *
     * **Notes**
     *
     * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint.
     */
    put: operations["CustomersPut"];
    /**
     * Creates Customers. Multiple customers can be created in one call.
     *
     * **Required Fields**
     * * last_name
     * * first_name
     * * email
     *
     * **Required Fields Customer Address**
     * * first_name
     * * city
     * * country_code
     * * state_or_province
     * * last_name
     * * address1
     * * postal_code
     *
     * **Required Fields Attributes**
     * * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer.
     * * attribute_id
     * * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).
     */
    post: operations["CustomersPost"];
    /**
     * Deletes Customers.
     *
     * **Required Query**
     * * id:in -- ID of the customer
     *
     * **Notes**
     *
     * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
     */
    delete: operations["CustomersDelete"];
  };
  "/customers/addresses": {
    /** Returns a list of Customer Addresses. Optional filter parameters can be passed in. */
    get: operations["CustomersAddressesGet"];
    /**
     * Updates a Customer Address. Multiple customer addresses can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer Address*
     * * customer_id -- ID of the *Customer*.
     */
    put: operations["CustomersAddressesPut"];
    /**
     * Creates a Customer Address. Multiple customer addresses can be created in one call.
     *
     * **Required Fields**
     * * first_name
     * * city
     * * customer_id
     * * country_code
     * * state_or_province
     * * last_name
     * * address1
     * * postal_code
     */
    post: operations["CustomersAddressesPost"];
    /**
     * Deletes a Customer Address.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Address*
     */
    delete: operations["CustomersAddressesDelete"];
  };
  "/customers/attributes": {
    /** Returns a list of Customer Attributes. Optional filter parameters can be passed in. */
    get: operations["CustomersAttributesGet"];
    /**
     * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer Attribute*
     *
     * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     */
    put: operations["CustomersAttributesPut"];
    /**
     * Creates a Customer Attribute. Multiple customer attributes can be created in one call.
     *
     * **Required Fields**
     * * name
     * * type
     *
     * **Notes**
     *
     * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     *
     * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
     *
     * A store cannot have more than 50 customer attributes.
     */
    post: operations["CustomersAttributesPost"];
    /**
     * Deletes Customer Attributes from the store.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Attribute*
     */
    delete: operations["CustomersAttributesDelete"];
  };
  "/customers/attribute-values": {
    /** Returns a list of Customer Attribute Values. Optional filter parameters can be passed in. */
    get: operations["CustomersAttributeValuesGet"];
    /**
     * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
     *
     * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
     *
     * Up to 10 per call are allowed.
     *
     * **Required Fields**
     * * customer_id -- ID of the *Customer*
     * * id -- ID of the *Customer Attribute*
     * * value -- Value of the *Customer Attribute*
     */
    put: operations["CustomersAttributeValuesPut"];
    /**
     * Deletes Customer Attribute Values. Deletes the attribute value from the customer.
     *
     * **Required Query**
     * * id:in - ID of the *Customer Attribute Value*
     */
    delete: operations["CustomersAttributeValuesDelete"];
  };
  "/customers/form-field-values": {
    /** Returns a list of Form Field Values for the Customer or Customer Address object. */
    get: operations["CustomerFormFieldsGet"];
    /**
     * Upserts Customer Form Field Values. Updates the form field values on the Customer or Customer Address. Multiple form field values can be updated in one call.
     *
     * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
     *
     * **Required Fields**
     * * name
     * * value
     * * customer_id
     *
     * OR
     *
     * * name
     * * value
     * * address_id
     */
    put: operations["CustomerFormFieldValuePUT"];
  };
  "/customers/{customerId}/consent": {
    /** Gets the customer consent. */
    get: operations["CustomersConsentByCustomerId_GET"];
    /** Updates the customer consent. */
    put: operations["CustomersConsentByCustomerId_PUT"];
  };
}

export interface definitions {
  /** Data about the response, including pagination and collection totals. */
  Pagination: {
    /** Total number of items in the result set. */
    total?: number;
    /** Total number of items in the collection response. */
    count?: number;
    /** The amount of items returned in the collection per page, controlled by the limit parameter. */
    per_page?: number;
    /** The page you are currently on within the collection. */
    current_page?: number;
    /** The total number of pages in the collection. */
    total_pages?: number;
    /** Pagination links for the previous and next parts of the whole collection. */
    links?: {
      /** Link to the previous page returned in the response. */
      previous?: string;
      /** Link to the current page returned in the response. */
      current?: string;
      /** Link to the next page returned in the response. */
      next?: string;
    };
  };
  /** Data about the response, including pagination and collection totals. */
  _metaCollection: {
    /** Data about the response, including pagination and collection totals. */
    pagination?: {
      /** Total number of items in the result set. */
      total?: number;
      /** Total number of items in the collection response. */
      count?: number;
      /** The amount of items returned in the collection per page, controlled by the limit parameter. */
      per_page?: number;
      /** The page you are currently on within the collection. */
      current_page?: number;
      /** The total number of pages in the collection. */
      total_pages?: number;
      /** Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** Link to the previous page returned in the response. */
        previous?: string;
        /** Link to the current page returned in the response. */
        current?: string;
        /** Link to the next page returned in the response. */
        next?: string;
      };
    };
  };
  ErrorResponse: {
    /** The HTTP status code. */
    status?: number;
    /** The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
    errors?: { [key: string]: string };
  };
  /** Error payload for the BigCommerce API. */
  _error: {
    /** The HTTP status code. */
    status?: number;
    /** The error title describing the particular error. */
    title?: string;
    type?: string;
    instance?: string;
  };
  customer_Full: {
    /** The email of the customer. Must be unique. */
    email?: string;
    /** The first name of the customer. */
    first_name?: string;
    /** The last name of the customer. */
    last_name?: string;
    /** The company of the customer. */
    company?: string;
    /** The phone number of the customer. */
    phone?: string;
    /** The IP address from which this customer was registered. */
    registration_ip_address?: string;
    /** The customer notes. */
    notes?: string;
    /** The tax exempt category code for the customer. */
    tax_exempt_category?: string;
    /** Id of the group which this customer belongs to. */
    customer_group_id?: number;
    /** The unique numeric ID of the customer. */
    id?: number;
    /** The date on which the customer was modified. */
    date_modified?: string;
    /** The date of which the customer was created. */
    date_created?: string;
    /** Total number of customer addresses */
    address_count?: number;
    /** Total number of customer attributes */
    attribute_count?: number;
    authentication?: {
      /** If `true`, this customer will be forced to change password on next login. */
      force_password_reset?: boolean;
    };
    /** Array of customer addresses. Limited to 10 */
    addresses?: {
      /** The first name of the customer address. */
      first_name: string;
      /** The last name of the customer address. */
      last_name: string;
      /** The company of the customer address. */
      company?: string;
      /** The address 1 line. */
      address1: string;
      /** The address 2 line. */
      address2?: string;
      /** The city of the customer address. */
      city: string;
      /** The state or province name */
      state_or_province: string;
      /** The postal code of the customer address. */
      postal_code: string;
      /** The country code of the customer address. */
      country_code: string;
      /** The phone number of the customer address. */
      phone?: string;
      /** The address type. Residential or Commercial */
      address_type?: "residential" | "commercial";
      /** The customer ID. */
      customer_id: number;
      /** The unique numeric ID of the address. */
      id: number;
      /** The country name of the customer address. */
      country?: string;
      /** Array of form fields. Controlled by `formfields` parameter. */
      form_fields?: (
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            customer_id: number;
          })
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            /** The Customer Address ID. */
            address_id: number;
          })
      )[];
    }[];
    /** Array of customer attributes. Limited to 10 */
    attributes?: {
      /** Attribute ID. */
      attribute_id: number;
      /** Attribute value. This will always be a string, regardless of the attributes type. */
      value: string;
      /** Attribute value ID. */
      id?: number;
      /** Customer ID. */
      customer_id: number;
      /** The date on which the customer attribute value was modified. */
      date_modified?: string;
      /** The date of which the customer attribute value was created. */
      date_created?: string;
    }[];
    /** Array of form fields. Controlled by `formfields` parameter. */
    form_fields?: (
      | ({
          /** The form field name. */
          name: string;
          value: string | number | string[];
        } & {
          customer_id: number;
        })
      | ({
          /** The form field name. */
          name: string;
          value: string | number | string[];
        } & {
          /** The Customer Address ID. */
          address_id: number;
        })
    )[];
    /** Store credit. */
    store_credit_amounts?: {
      amount?: number;
    }[];
    /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
    accepts_product_review_abandoned_cart_emails?: boolean;
    channel_ids?: definitions["customerChannelIds"];
  };
  customer_Post: {
    /** The email of the customer. Must be unique. */
    email: string;
    /** The first name of the customer. */
    first_name: string;
    /** The last name of the customer. */
    last_name: string;
    /** The company of the customer. */
    company?: string;
    /** The phone number of the customer. */
    phone?: string;
    /** The customer notes. */
    notes?: string;
    /** The tax exempt category code for the customer. */
    tax_exempt_category?: string;
    /** Id of the group which this customer belongs to. */
    customer_group_id?: number;
    /** Array of customer addresses. Limited to 10 */
    addresses?: {
      /** The first name of the customer address. */
      first_name: string;
      /** The last name of the customer address. */
      last_name: string;
      /** The company of the customer address. */
      company?: string;
      /** The address 1 line. */
      address1: string;
      /** The address 2 line. */
      address2?: string;
      /** The city of the customer address. */
      city: string;
      /** The state or province name */
      state_or_province: string;
      /** The postal code of the customer address. */
      postal_code: string;
      /** The country code of the customer address. */
      country_code: string;
      /** The phone number of the customer address. */
      phone?: string;
      /** The address type. Residential or Commercial */
      address_type?: "residential" | "commercial";
    }[];
    /** Array of customer attributes. Limited to 10 */
    attributes?: definitions["customerAttributes_Base"][];
    authentication?: {
      /** If `true`, this customer will be forced to change password on next login. */
      force_password_reset?: boolean;
      /** New password for customer. Write only field */
      new_password?: string;
    };
    /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
    accepts_product_review_abandoned_cart_emails?: boolean;
    /** Store credit. */
    store_credit_amounts?: {
      amount?: number;
    }[];
  };
  customer_Put: {
    /** The email of the customer. Must be unique. */
    email?: string;
    /** The first name of the customer. */
    first_name?: string;
    /** The last name of the customer. */
    last_name?: string;
    /** The company of the customer. */
    company?: string;
    /** The phone number of the customer. */
    phone?: string;
    /** The IP address from which this customer was registered. */
    registration_ip_address?: string;
    /** The customer notes. */
    notes?: string;
    /** The tax exempt category code for the customer. */
    tax_exempt_category?: string;
    /** Id of the group which this customer belongs to. */
    customer_group_id?: number;
    /** The unique numeric ID of the customer. */
    id: number;
    authentication?: {
      /** If `true`, this customer will be forced to change password on next login. */
      force_password_reset?: boolean;
      /** New password for customer. Write only field */
      new_password?: string;
    };
    /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
    accepts_product_review_abandoned_cart_emails?: boolean;
    /** Store credit. */
    store_credit_amounts?: {
      amount?: number;
    }[];
  };
  attributeValue_Full: definitions["attribueValue_Base"] & {
    /** The date on which the customer attribute value was modified. */
    date_modified?: string;
    /** The date of which the customer attribute value was created. */
    date_created?: string;
  };
  attribueValue_Base: {
    /** Attribute value ID. */
    id?: number;
    /** Attribute ID. */
    attribute_id: number;
    /** Attribute value. This will always be a string, regardless of the attributes type. */
    value: string;
    /** Customer ID. */
    customer_id: number;
  };
  customerAttributeValue_Full: {
    /** Attribute ID. */
    attribute_id: number;
    /** Attribute value. This will always be a string, regardless of the attributes type. */
    attribute_value: string;
  };
  attribute_Full: {
    /** Attribute name. */
    name: string;
    /** Attribute type should match one of: string, number, date. When doing a */
    type: "string" | "number" | "date";
    /** Attribute ID. */
    id: number;
    /** The date on which the customer attribute was modified. */
    date_modified?: string;
    /** The date of which the customer attribute was created. */
    date_created?: string;
  };
  /** Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer. */
  attribute_Put: {
    /** Attribute name. */
    name: string;
    /** Attribute ID. */
    id: number;
  };
  attribute_Post: {
    /** Attribute name. */
    name: string;
    /** Attribute type should match one of: string, number, date. When doing a */
    type: "string" | "number" | "date";
  };
  address_Full: {
    /** The first name of the customer address. */
    first_name: string;
    /** The last name of the customer address. */
    last_name: string;
    /** The company of the customer address. */
    company?: string;
    /** The address 1 line. */
    address1: string;
    /** The address 2 line. */
    address2?: string;
    /** The city of the customer address. */
    city: string;
    /** The state or province name */
    state_or_province: string;
    /** The postal code of the customer address. */
    postal_code: string;
    /** The country code of the customer address. */
    country_code: string;
    /** The phone number of the customer address. */
    phone?: string;
    /** The address type. Residential or Commercial */
    address_type?: "residential" | "commercial";
    /** The customer ID. */
    customer_id: number;
    /** The unique numeric ID of the address. */
    id: number;
    /** The country name of the customer address. */
    country?: string;
    /** Array of form fields. Controlled by `formfields` parameter. */
    form_fields?: (
      | ({
          /** The form field name. */
          name: string;
          value: string | number | string[];
        } & {
          customer_id: number;
        })
      | ({
          /** The form field name. */
          name: string;
          value: string | number | string[];
        } & {
          /** The Customer Address ID. */
          address_id: number;
        })
    )[];
  };
  address_Put: {
    /** The first name of the customer address. */
    first_name: string;
    /** The last name of the customer address. */
    last_name: string;
    /** The company of the customer address. */
    company?: string;
    /** The address 1 line. */
    address1: string;
    /** The address 2 line. */
    address2?: string;
    /** The city of the customer address. */
    city: string;
    /** The state or province name */
    state_or_province: string;
    /** The postal code of the customer address. */
    postal_code: string;
    /** The country code of the customer address. */
    country_code: string;
    /** The phone number of the customer address. */
    phone?: string;
    /** The address type. Residential or Commercial */
    address_type?: "residential" | "commercial";
    /** The customer ID. */
    customer_id: number;
    /** The unique numeric ID of the address. */
    id: number;
  };
  address_Post: {
    /** The first name of the customer address. */
    first_name: string;
    /** The last name of the customer address. */
    last_name: string;
    /** The company of the customer address. */
    company?: string;
    /** The address 1 line. */
    address1: string;
    /** The address 2 line. */
    address2?: string;
    /** The city of the customer address. */
    city: string;
    /** The state or province name */
    state_or_province: string;
    /** The postal code of the customer address. */
    postal_code: string;
    /** The country code of the customer address. */
    country_code: string;
    /** The phone number of the customer address. */
    phone?: string;
    /** The address type. Residential or Commercial */
    address_type?: "residential" | "commercial";
    /** The customer ID. */
    customer_id: number;
  };
  /** The `address` object for the `customer` object's `addresses` array. */
  customerAddresses_Base: {
    /** The first name of the customer address. */
    first_name: string;
    /** The last name of the customer address. */
    last_name: string;
    /** The company of the customer address. */
    company?: string;
    /** The address 1 line. */
    address1: string;
    /** The address 2 line. */
    address2?: string;
    /** The city of the customer address. */
    city: string;
    /** The state or province name */
    state_or_province: string;
    /** The postal code of the customer address. */
    postal_code: string;
    /** The country code of the customer address. */
    country_code: string;
    /** The phone number of the customer address. */
    phone?: string;
    /** The address type. Residential or Commercial */
    address_type?: "residential" | "commercial";
  };
  customerAuthentication_PostPut: {
    /** If `true`, this customer will be forced to change password on next login. */
    force_password_reset?: boolean;
  } & {
    /** New password for customer. Write only field */
    new_password?: string;
  };
  customerAuthentication_Base: {
    /** If `true`, this customer will be forced to change password on next login. */
    force_password_reset?: boolean;
  };
  /** The address type. Residential or Commercial */
  addressType: "residential" | "commercial";
  /** Pagination links for the previous and next parts of the whole collection. */
  Links: {
    /** Link to the previous page returned in the response. */
    previous?: string;
    /** Link to the current page returned in the response. */
    current?: string;
    /** Link to the next page returned in the response. */
    next?: string;
  };
  /** Attribute type should match one of: string, number, date. When doing a */
  Type: "string" | "number" | "date";
  formFieldValue_Base: {
    /** The form field name. */
    name: string;
    value: string | number | string[];
  };
  CustomerFormFieldValue: {
    /** The form field name. */
    name: string;
    value: string | number | string[];
  } & {
    customer_id: number;
  };
  formFieldValue_Full:
    | {
        /** The form field name. */
        name: string;
        value: string | number | string[];
        customer_id: number;
      }
    | {
        /** The form field name. */
        name: string;
        value: string | number | string[];
        /** The Customer Address ID. */
        address_id: number;
      };
  formFieldValue_Put: (
    | ({
        /** The form field name. */
        name: string;
        value: string | number | string[];
      } & {
        customer_id: number;
      })
    | ({
        /** The form field name. */
        name: string;
        value: string | number | string[];
      } & {
        /** The Customer Address ID. */
        address_id: number;
      })
  )[];
  /** Response payload for the BigCommerce API. */
  consent_Full: {
    allow?: definitions["consentAllow"][];
    deny?: definitions["Deny"][];
    /** The date of which the customer consent was last updated. */
    updated_at?: string;
  };
  /** Response payload for the BigCommerce API. */
  DeclareCustomerConsentResponse: {
    /** Customer ID. */
    customer_id?: { [key: string]: any };
    allow?: definitions["consentAllow"][];
    deny?: definitions["Deny"][];
    /** The date of which the customer consent was last updated. */
    updated_at?: string;
  };
  consentAllow: "essential" | "functional" | "analytics" | "targeting";
  Deny: "essential" | "functional" | "analytics" | "targeting";
  /** Request payload for the BigCommerce API. */
  DeclareCustomerConsentRequest: {
    allow?: definitions["consentAllow"][];
    deny?: definitions["Deny"][];
  };
  customer_Base: {
    /** The email of the customer. Must be unique. */
    email?: string;
    /** The first name of the customer. */
    first_name?: string;
    /** The last name of the customer. */
    last_name?: string;
    /** The company of the customer. */
    company?: string;
    /** The phone number of the customer. */
    phone?: string;
    /** The customer notes. */
    notes?: string;
    /** The tax exempt category code for the customer. */
    tax_exempt_category?: string;
    /** Id of the group which this customer belongs to. */
    customer_group_id?: number;
  };
  /** Array of customer attributes. Limited to 10 */
  customerAttributes_Full: {
    /** Attribute ID. */
    attribute_id: number;
    /** Attribute value. This will always be a string, regardless of the attributes type. */
    value: string;
    /** Attribute value ID. */
    id?: number;
    /** Customer ID. */
    customer_id: number;
    /** The date on which the customer attribute value was modified. */
    date_modified?: string;
    /** The date of which the customer attribute value was created. */
    date_created?: string;
  }[];
  /**
   * The `attributes` array for the `customer` object used in `POST` requests to `/customers`.
   *
   * Array of customer attributes. Limited to 10.
   */
  customerAttributes_Base: {
    /** Attribute ID. */
    attribute_id: number;
    /** Attribute value. This will always be a string, regardless of the attributes type. */
    value: string;
  }[];
  attribute_Base: {
    /** Attribute name. */
    name: string;
    /** Attribute type should match one of: string, number, date. When doing a */
    type: "string" | "number" | "date";
    /** Attribute ID. */
    id: number;
    /** The date on which the customer attribute was modified. */
    date_modified?: string;
    /** The date of which the customer attribute was created. */
    date_created?: string;
  };
  /** Array of channel ids the Customer has access to. */
  customerChannelIds: number[];
}

export interface parameters {
  /** Filter items by first_name and last_name. `name=moriarty,holmes` */
  FilterNameParam: string[];
  /** Filter items by email. `email:in=janedoe@email.com` */
  FilterEmailParam: string;
  /**
   * Filter items by substring in first_name and last_name (%substring% - use with % symbols).
   * `name:like=moriarty&name:like=doe`
   */
  FilterNameLikeParam: string[];
  /**
   * Filter items by substring in first_name and last_name (%substring% - use with % symbols).
   * `name:like=moriarty,doe`
   */
  FilterAttributeNameLikeParam: string;
  /**
   * Filter items by id.
   * `id:in=4,5,6`
   */
  FilterIdParam: number[];
  /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
  FilterDateModifiedParam: string;
  /** Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
  FilterDateModifiedMinParam: string;
  /** Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
  FilterDateModifiedMaxParam: string;
  /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
  FilterDateCreatedParam: string;
  /** Filter items by date_created. `date_created:min=2018-09-05` */
  FilterDateCreatedMinParam: string;
  /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
  FilterDateCreatedMaxParam: string;
  /**
   * Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
   * `registration_ip_address:in=12.345.6.789`
   */
  FilterCustomerRegistrationIPAddressParam: number[];
  /** Filter items by company. `company:in=bigcommerce,commongood` */
  FilterCompanyParam: string[];
  /** Filter items by customer_group_id. `customer_group_id:in=5,6` */
  FilterCustomerGroupParam: string[];
  /** The type of the customer attrribute. `type=string` */
  FilterCustomerAttributeTypeParam: "string" | "number" | "date";
  /** The attribute name for which we should return values. `name=age` */
  FilterAttributeValueByNameParam: string;
  /** Page number. `page=1` */
  FilterPageParam: number;
  /** Items count per page. `limit=50` */
  FilterLimitParam: number;
  /**
   * Indicates whether to include customer sub-resources:
   *  * `addresses` - customer addresses
   *  * `storecredit` - store credit
   *  * `attributes` - customer attributes and address attributes
   *  * `formfields` - customer and address form fields
   *
   *  `include=addresses,storecredit,attributes,formfields`
   */
  FilterCustomerIncludeParam:
    | "addresses"
    | "storecredit"
    | "attributes"
    | "formfields";
  /**
   * Indicates whether to include customer address sub-resources:
   * * `formfields` - address form fields
   * `include=formfields`
   */
  FilterAddressIncludeParam: "formfields";
  Accept: string;
  "Content-Type": string;
  /** The ID of the customer. `customer_id:in=23,24,55` */
  FilterCustomerIdParam: number[];
  /** The attribute id for which we should return values. `attribute_id:in=1,2` */
  FilterAttributeIdParam: number[];
  /** The ID of the *Customer*. */
  FilterCustomerIdEqualsParam: number;
  /** The ID of the *Customer Address*. */
  FilterAddressIdEqualsParam: number;
  /** The fields name. */
  FilterFormFieldNameParam: string;
  /**
   * The field type.
   *  * `checkboxes` - checkboxes field
   *  * `date` - date field
   *  * `multiline` - multiline text field
   *  * `numbers` - numbers only field
   *  * `password` - password field
   *  * `radiobuttons` - radio buttons field
   *  * `text` - text field
   *  * `picklist` - pick list field
   */
  FilterFormFieldTypeParam:
    | "checkboxes"
    | "date"
    | "multiline"
    | "numbers"
    | "password"
    | "radiobuttons"
    | "text"
    | "picklist";
}

export interface responses {
  /** Customer Collection Response */
  CustomerCollectionResponse: {
    schema: {
      data?: definitions["customer_Full"][];
      meta?: definitions["_metaCollection"];
    };
  };
  /** Customer Response */
  CustomerResponse: {
    schema: {
      data?: definitions["customer_Full"][];
      meta?: { [key: string]: any };
    };
  };
  AddressCollectionResponse: {
    schema: {
      data?: {
        /** The first name of the customer address. */
        first_name: string;
        /** The last name of the customer address. */
        last_name: string;
        /** The company of the customer address. */
        company?: string;
        /** The address 1 line. */
        address1: string;
        /** The address 2 line. */
        address2?: string;
        /** The city of the customer address. */
        city: string;
        /** The state or province name */
        state_or_province: string;
        /** The postal code of the customer address. */
        postal_code: string;
        /** The country code of the customer address. */
        country_code: string;
        /** The phone number of the customer address. */
        phone?: string;
        /** The address type. Residential or Commercial */
        address_type?: "residential" | "commercial";
        /** The customer ID. */
        customer_id: number;
        /** The unique numeric ID of the address. */
        id: number;
        /** The country name of the customer address. */
        country?: string;
        /** Array of form fields. Controlled by `formfields` parameter. */
        form_fields?: (
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              customer_id: number;
            })
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              /** The Customer Address ID. */
              address_id: number;
            })
        )[];
      }[];
      /** Data about the response, including pagination and collection totals. */
      meta?: {
        /** Data about the response, including pagination and collection totals. */
        pagination?: {
          /** Total number of items in the result set. */
          total?: number;
          /** Total number of items in the collection response. */
          count?: number;
          /** The amount of items returned in the collection per page, controlled by the limit parameter. */
          per_page?: number;
          /** The page you are currently on within the collection. */
          current_page?: number;
          /** The total number of pages in the collection. */
          total_pages?: number;
          /** Pagination links for the previous and next parts of the whole collection. */
          links?: {
            /** Link to the previous page returned in the response. */
            previous?: string;
            /** Link to the current page returned in the response. */
            current?: string;
            /** Link to the next page returned in the response. */
            next?: string;
          };
        };
      };
    };
  };
  AddressResponse: {
    schema: {
      data?: {
        /** The first name of the customer address. */
        first_name: string;
        /** The last name of the customer address. */
        last_name: string;
        /** The company of the customer address. */
        company?: string;
        /** The address 1 line. */
        address1: string;
        /** The address 2 line. */
        address2?: string;
        /** The city of the customer address. */
        city: string;
        /** The state or province name */
        state_or_province: string;
        /** The postal code of the customer address. */
        postal_code: string;
        /** The country code of the customer address. */
        country_code: string;
        /** The phone number of the customer address. */
        phone?: string;
        /** The address type. Residential or Commercial */
        address_type?: "residential" | "commercial";
        /** The customer ID. */
        customer_id: number;
        /** The unique numeric ID of the address. */
        id: number;
        /** The country name of the customer address. */
        country?: string;
        /** Array of form fields. Controlled by `formfields` parameter. */
        form_fields?: (
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              customer_id: number;
            })
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              /** The Customer Address ID. */
              address_id: number;
            })
        )[];
      }[];
      meta?: { [key: string]: any };
    };
  };
  CustomerAttributeValueCollectionResponse: {
    schema: {
      data?: {
        /** Attribute ID. */
        attribute_id: number;
        /** Attribute value. This will always be a string, regardless of the attributes type. */
        value: string;
        /** Attribute value ID. */
        id?: number;
        /** Customer ID. */
        customer_id: number;
        /** The date on which the customer attribute value was modified. */
        date_modified?: string;
        /** The date of which the customer attribute value was created. */
        date_created?: string;
      }[];
      /** Data about the response, including pagination and collection totals. */
      meta?: {
        /** Data about the response, including pagination and collection totals. */
        pagination?: {
          /** Total number of items in the result set. */
          total?: number;
          /** Total number of items in the collection response. */
          count?: number;
          /** The amount of items returned in the collection per page, controlled by the limit parameter. */
          per_page?: number;
          /** The page you are currently on within the collection. */
          current_page?: number;
          /** The total number of pages in the collection. */
          total_pages?: number;
          /** Pagination links for the previous and next parts of the whole collection. */
          links?: {
            /** Link to the previous page returned in the response. */
            previous?: string;
            /** Link to the current page returned in the response. */
            current?: string;
            /** Link to the next page returned in the response. */
            next?: string;
          };
        };
      };
    };
  };
  CustomerAttributeValueResponse: {
    schema: {
      data?: {
        /** Attribute ID. */
        attribute_id: number;
        /** Attribute value. This will always be a string, regardless of the attributes type. */
        value: string;
        /** Attribute value ID. */
        id?: number;
        /** Customer ID. */
        customer_id: number;
        /** The date on which the customer attribute value was modified. */
        date_modified?: string;
        /** The date of which the customer attribute value was created. */
        date_created?: string;
      }[];
      meta?: { [key: string]: any };
    };
  };
  CustomerAttributeCollectionResponse: {
    schema: {
      data?: {
        /** Attribute ID. */
        attribute_id: number;
        /** Attribute value. This will always be a string, regardless of the attributes type. */
        value: string;
        /** Attribute value ID. */
        id?: number;
        /** Customer ID. */
        customer_id: number;
        /** The date on which the customer attribute value was modified. */
        date_modified?: string;
        /** The date of which the customer attribute value was created. */
        date_created?: string;
      }[];
      /** Data about the response, including pagination and collection totals. */
      meta?: {
        /** Data about the response, including pagination and collection totals. */
        pagination?: {
          /** Total number of items in the result set. */
          total?: number;
          /** Total number of items in the collection response. */
          count?: number;
          /** The amount of items returned in the collection per page, controlled by the limit parameter. */
          per_page?: number;
          /** The page you are currently on within the collection. */
          current_page?: number;
          /** The total number of pages in the collection. */
          total_pages?: number;
          /** Pagination links for the previous and next parts of the whole collection. */
          links?: {
            /** Link to the previous page returned in the response. */
            previous?: string;
            /** Link to the current page returned in the response. */
            current?: string;
            /** Link to the next page returned in the response. */
            next?: string;
          };
        };
      };
    };
  };
  CustomerAttributesResponse: {
    schema: {
      data?: {
        /** Attribute name. */
        name: string;
        /** Attribute type should match one of: string, number, date. When doing a */
        type: "string" | "number" | "date";
        /** Attribute ID. */
        id: number;
        /** The date on which the customer attribute was modified. */
        date_modified?: string;
        /** The date of which the customer attribute was created. */
        date_created?: string;
      }[];
      meta?: { [key: string]: any };
    };
  };
  FormFieldValueCollectionResponse: {
    schema: {
      data?: (
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            customer_id: number;
          })
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            /** The Customer Address ID. */
            address_id: number;
          })
      )[];
      /** Data about the response, including pagination and collection totals. */
      meta?: {
        /** Data about the response, including pagination and collection totals. */
        pagination?: {
          /** Total number of items in the result set. */
          total?: number;
          /** Total number of items in the collection response. */
          count?: number;
          /** The amount of items returned in the collection per page, controlled by the limit parameter. */
          per_page?: number;
          /** The page you are currently on within the collection. */
          current_page?: number;
          /** The total number of pages in the collection. */
          total_pages?: number;
          /** Pagination links for the previous and next parts of the whole collection. */
          links?: {
            /** Link to the previous page returned in the response. */
            previous?: string;
            /** Link to the current page returned in the response. */
            current?: string;
            /** Link to the next page returned in the response. */
            next?: string;
          };
        };
      };
    };
  };
  FormFieldValuesResponse: {
    schema: {
      data?: (
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            customer_id: number;
          })
        | ({
            /** The form field name. */
            name: string;
            value: string | number | string[];
          } & {
            /** The Customer Address ID. */
            address_id: number;
          })
      )[];
      meta?: { [key: string]: any };
    };
  };
  consent_Resp: {
    schema: definitions["consent_Full"];
  };
}

export interface operations {
  /**
   * Returns a list of Customers. Optional filter parameters can be passed in.
   *
   * **Notes**
   *
   * Attribute names are not available on the customer object.
   */
  CustomersGet: {
    parameters: {
      query: {
        /** Page number. `page=1` */
        page?: unknown;
        /** Items count per page. `limit=50` */
        limit?: unknown;
        /**
         * Filter items by id.
         * `id:in=4,5,6`
         */
        "id:in"?: unknown;
        /** Filter items by company. `company:in=bigcommerce,commongood` */
        "company:in"?: unknown;
        /** Filter items by customer_group_id. `customer_group_id:in=5,6` */
        "customer_group_id:in"?: unknown;
        /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
        date_created?: unknown;
        /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
        "date_created:max"?: unknown;
        /** Filter items by date_created. `date_created:min=2018-09-05` */
        "date_created:min"?: unknown;
        /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
        date_modified?: unknown;
        /** Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
        "date_modified:min"?: unknown;
        /** Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
        "date_modified:max"?: unknown;
        /** Filter items by email. `email:in=janedoe@email.com` */
        "email:in"?: unknown;
        /** Filter items by first_name and last_name. `name=james moriarty` */
        "name:in"?: unknown;
        /**
         * Filter items by substring in first_name and last_name.
         * `name:like=moriarty, sherlock`
         * Concatenates the first_name and last_name fields.
         */
        "name:like"?: unknown;
        /**
         * Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
         * `registration_ip_address:in=12.345.6.789`
         */
        "registration_ip_address:in"?: unknown;
        /**
         * Indicates whether to include customer sub-resources:
         *  * `addresses` - customer addresses
         *  * `storecredit` - store credit
         *  * `attributes` - customer attributes and address attributes
         *  * `formfields` - customer and address form fields
         *
         *  `include=addresses,storecredit,attributes,formfields`
         */
        include?: unknown;
        /**
         * Sort items by date_created or last_name:
         * * `date_created:asc` - date created, ascending
         * * `date_created:desc` - date created, descending
         * * `last_name:asc` - last name, ascending
         * * `last_name:desc` - last name, descending
         *
         * Example: `sort=last_name:asc`
         */
        sort?: unknown;
      };
    };
    responses: {
      200: responses["CustomerCollectionResponse"];
    };
  };
  /**
   * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.
   *
   * **Required Fields**
   * * id -- ID of the *Customer* This must be included in the request body
   *
   * **Read Only Fields**
   * * id
   * * registration_ip_address
   * * date_created
   * * date_modified
   *
   *
   * **Notes**
   *
   * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint.
   */
  CustomersPut: {
    parameters: {
      body: {
        body: {
          /** The email of the customer. Must be unique. */
          email?: string;
          /** The first name of the customer. */
          first_name?: string;
          /** The last name of the customer. */
          last_name?: string;
          /** The company of the customer. */
          company?: string;
          /** The phone number of the customer. */
          phone?: string;
          /** The IP address from which this customer was registered. */
          registration_ip_address?: string;
          /** The customer notes. */
          notes?: string;
          /** The tax exempt category code for the customer. */
          tax_exempt_category?: string;
          /** Id of the group which this customer belongs to. */
          customer_group_id?: number;
          /** The unique numeric ID of the customer. */
          id: number;
          authentication?: {
            /** If `true`, this customer will be forced to change password on next login. */
            force_password_reset?: boolean;
            /** New password for customer. Write only field */
            new_password?: string;
          };
          /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
          accepts_product_review_abandoned_cart_emails?: boolean;
          /** Store credit. */
          store_credit_amounts?: {
            amount?: number;
          }[];
        }[];
      };
    };
    responses: {
      200: responses["CustomerCollectionResponse"];
      /** The `Customer` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Creates Customers. Multiple customers can be created in one call.
   *
   * **Required Fields**
   * * last_name
   * * first_name
   * * email
   *
   * **Required Fields Customer Address**
   * * first_name
   * * city
   * * country_code
   * * state_or_province
   * * last_name
   * * address1
   * * postal_code
   *
   * **Required Fields Attributes**
   * * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer.
   * * attribute_id
   * * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).
   */
  CustomersPost: {
    parameters: {
      body: {
        body: {
          /** The email of the customer. Must be unique. */
          email: string;
          /** The first name of the customer. */
          first_name: string;
          /** The last name of the customer. */
          last_name: string;
          /** The company of the customer. */
          company?: string;
          /** The phone number of the customer. */
          phone?: string;
          /** The customer notes. */
          notes?: string;
          /** The tax exempt category code for the customer. */
          tax_exempt_category?: string;
          /** Id of the group which this customer belongs to. */
          customer_group_id?: number;
          /** Array of customer addresses. Limited to 10 */
          addresses?: {
            /** The first name of the customer address. */
            first_name: string;
            /** The last name of the customer address. */
            last_name: string;
            /** The company of the customer address. */
            company?: string;
            /** The address 1 line. */
            address1: string;
            /** The address 2 line. */
            address2?: string;
            /** The city of the customer address. */
            city: string;
            /** The state or province name */
            state_or_province: string;
            /** The postal code of the customer address. */
            postal_code: string;
            /** The country code of the customer address. */
            country_code: string;
            /** The phone number of the customer address. */
            phone?: string;
            /** The address type. Residential or Commercial */
            address_type?: "residential" | "commercial";
          }[];
          /** Array of customer attributes. Limited to 10 */
          attributes?: {
            /** Attribute ID. */
            attribute_id: number;
            /** Attribute value. This will always be a string, regardless of the attributes type. */
            attribute_value: string;
          }[];
          authentication?: {
            /** If `true`, this customer will be forced to change password on next login. */
            force_password_reset?: boolean;
            /** New password for customer. Write only field */
            new_password?: string;
          };
          /** It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails. */
          accepts_product_review_abandoned_cart_emails?: boolean;
          /** Store credit. */
          store_credit_amounts?: {
            amount?: number;
          }[];
        }[];
      };
    };
    responses: {
      200: responses["CustomerCollectionResponse"];
      /** The *Customer* was not valid. This is the result of missing required fields or trying to edit a read only field. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Deletes Customers.
   *
   * **Required Query**
   * * id:in -- ID of the customer
   *
   * **Notes**
   *
   * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
   */
  CustomersDelete: {
    parameters: {
      query: {
        /**
         * Filter items by id.
         * `id:in=4,5,6`
         */
        "id:in": unknown;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of Customer Addresses. Optional filter parameters can be passed in. */
  CustomersAddressesGet: {
    parameters: {
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
      query: {
        /** Page number. `page=1` */
        page?: unknown;
        /** Items count per page. `limit=50` */
        limit?: unknown;
        /** Filter items by company. `company:in=bigcommerce,commongood` */
        "company:in"?: unknown;
        /** Filter items by first_name and last_name. `name=moriarty,holmes` */
        name?: unknown;
        /** The ID of the customer. `customer_id:in=23,24,55` */
        "customer_id:in"?: unknown;
        /**
         * Indicates whether to include customer address sub-resources:
         * * `formfields` - address form fields
         * `include=formfields`
         */
        include?: unknown;
        /**
         * Filter items by id.
         * `id:in=4,5,6`
         */
        "id:in"?: unknown;
      };
    };
    responses: {
      200: responses["AddressCollectionResponse"];
    };
  };
  /**
   * Updates a Customer Address. Multiple customer addresses can be updated in one call.
   *
   * **Required Fields**
   * * id -- ID of the *Customer Address*
   * * customer_id -- ID of the *Customer*.
   */
  CustomersAddressesPut: {
    parameters: {
      body: {
        body: {
          /** The first name of the customer address. */
          first_name: string;
          /** The last name of the customer address. */
          last_name: string;
          /** The company of the customer address. */
          company?: string;
          /** The address 1 line. */
          address1: string;
          /** The address 2 line. */
          address2?: string;
          /** The city of the customer address. */
          city: string;
          /** The state or province name */
          state_or_province: string;
          /** The postal code of the customer address. */
          postal_code: string;
          /** The country code of the customer address. */
          country_code: string;
          /** The phone number of the customer address. */
          phone?: string;
          /** The address type. Residential or Commercial */
          address_type?: "residential" | "commercial";
          /** The customer ID. */
          customer_id: number;
          /** The unique numeric ID of the address. */
          id: number;
        }[];
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["AddressCollectionResponse"];
      /** The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Creates a Customer Address. Multiple customer addresses can be created in one call.
   *
   * **Required Fields**
   * * first_name
   * * city
   * * customer_id
   * * country_code
   * * state_or_province
   * * last_name
   * * address1
   * * postal_code
   */
  CustomersAddressesPost: {
    parameters: {
      body: {
        body: {
          /** The first name of the customer address. */
          first_name: string;
          /** The last name of the customer address. */
          last_name: string;
          /** The company of the customer address. */
          company?: string;
          /** The address 1 line. */
          address1: string;
          /** The address 2 line. */
          address2?: string;
          /** The city of the customer address. */
          city: string;
          /** The state or province name */
          state_or_province: string;
          /** The postal code of the customer address. */
          postal_code: string;
          /** The country code of the customer address. */
          country_code: string;
          /** The phone number of the customer address. */
          phone?: string;
          /** The address type. Residential or Commercial */
          address_type?: "residential" | "commercial";
          /** The customer ID. */
          customer_id: number;
        }[];
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["AddressCollectionResponse"];
      /** The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Deletes a Customer Address.
   *
   * **Required Query**
   * * id:in -- ID of the *Customer Address*
   */
  CustomersAddressesDelete: {
    parameters: {
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
      query: {
        /**
         * Filter items by id.
         * `id:in=4,5,6`
         */
        "id:in": unknown;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of Customer Attributes. Optional filter parameters can be passed in. */
  CustomersAttributesGet: {
    parameters: {
      query: {
        /** Page number. `page=1` */
        page?: unknown;
        /** Items count per page. `limit=50` */
        limit?: unknown;
        /** Filter items by first_name and last_name. */
        "name:in"?: unknown;
        /** Filter items by substring in first_name and last_name (%substring% - use with % symbols). */
        "name:like"?: unknown;
        /** The type of the customer attrribute. */
        type?: unknown;
        /** Filter items by date_created. */
        date_created?: unknown;
        /** Filter items by date_created. */
        "date_created:max"?: unknown;
        /** Filter items by date_created. */
        "date_created:min"?: unknown;
        /** Filter items by date_modified. */
        date_modified?: unknown;
        /** Filter items by date_modified. */
        "date_modified:max"?: unknown;
        /** Filter items by date_modified. */
        "date_modified:min"?: unknown;
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["CustomerAttributesResponse"];
    };
  };
  /**
   * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
   *
   * **Required Fields**
   * * id -- ID of the *Customer Attribute*
   *
   * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
   */
  CustomersAttributesPut: {
    parameters: {
      body: {
        body: definitions["attribute_Put"][];
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["CustomerAttributesResponse"];
      /** The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Creates a Customer Attribute. Multiple customer attributes can be created in one call.
   *
   * **Required Fields**
   * * name
   * * type
   *
   * **Notes**
   *
   * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
   *
   * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
   *
   * A store cannot have more than 50 customer attributes.
   */
  CustomersAttributesPost: {
    parameters: {
      body: {
        body: {
          /** Attribute name. */
          name: string;
          /** Attribute type should match one of: string, number, date. */
          type: "string" | "number" | "date";
        }[];
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["CustomerAttributesResponse"];
      /** The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Deletes Customer Attributes from the store.
   *
   * **Required Query**
   * * id:in -- ID of the *Customer Attribute*
   */
  CustomersAttributesDelete: {
    parameters: {
      query: {
        /** Filter items by id. */
        "id:in": unknown;
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of Customer Attribute Values. Optional filter parameters can be passed in. */
  CustomersAttributeValuesGet: {
    parameters: {
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
      query: {
        /** Page number. `page=1` */
        page?: unknown;
        /** Items count per page. `limit=50` */
        limit?: unknown;
        /** The ID of the customer. `customer_id:in=23,24,55` */
        "customer_id:in"?: unknown;
        /** The attribute id for which we should return values. `attribute_id:in=1,2` */
        "attribute_id:in"?: unknown;
        /** The attribute name for which we should return values. `name=age` */
        name?: unknown;
        /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
        date_created?: unknown;
        /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
        "date_created:max"?: unknown;
        /** Filter items by date_created. `date_created:min=2018-09-05` */
        "date_created:min"?: unknown;
        /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
        date_modified?: unknown;
        /** Filter items by maximum date_modified `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
        "date_modified:max"?: unknown;
        /** Filter items by mininum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
        "date_modified:min"?: unknown;
      };
    };
    responses: {
      200: responses["CustomerAttributeValueCollectionResponse"];
    };
  };
  /**
   * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
   *
   * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
   *
   * Up to 10 per call are allowed.
   *
   * **Required Fields**
   * * customer_id -- ID of the *Customer*
   * * id -- ID of the *Customer Attribute*
   * * value -- Value of the *Customer Attribute*
   */
  CustomersAttributeValuesPut: {
    parameters: {
      body: {
        body: {
          /** Attribute ID. */
          attribute_id: number;
          /** Attribute value. This will always be a string, regardless of the attributes type. */
          value: string;
          /** Attribute value ID. */
          id?: number;
          /** Customer ID. */
          customer_id: number;
        }[];
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      200: responses["CustomerAttributeValueCollectionResponse"];
      /** The `CustomerAttributeValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Deletes Customer Attribute Values. Deletes the attribute value from the customer.
   *
   * **Required Query**
   * * id:in - ID of the *Customer Attribute Value*
   */
  CustomersAttributeValuesDelete: {
    parameters: {
      query: {
        /**
         * Filter items by id.
         * `id:in=4,5,6`
         */
        "id:in": unknown;
      };
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Returns a list of Form Field Values for the Customer or Customer Address object. */
  CustomerFormFieldsGet: {
    parameters: {
      header: {
        Accept?: unknown;
        "Content-Type"?: unknown;
      };
      query: {
        /** Page number. `page=1` */
        page?: unknown;
        /** Items count per page. `limit=50` */
        limit?: unknown;
        /** The ID of the *Customer*. */
        customer_id?: unknown;
        /** The ID of the *Customer Address*. */
        address_id?: unknown;
        /** The fields name. */
        field_name?: unknown;
        /**
         * The field type.
         *  * `checkboxes` - checkboxes field
         *  * `date` - date field
         *  * `multiline` - multiline text field
         *  * `numbers` - numbers only field
         *  * `password` - password field
         *  * `radiobuttons` - radio buttons field
         *  * `text` - text field
         *  * `picklist` - pick list field
         */
        field_type?: unknown;
      };
    };
    responses: {
      200: responses["FormFieldValueCollectionResponse"];
      /** The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /**
   * Upserts Customer Form Field Values. Updates the form field values on the Customer or Customer Address. Multiple form field values can be updated in one call.
   *
   * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
   *
   * **Required Fields**
   * * name
   * * value
   * * customer_id
   *
   * OR
   *
   * * name
   * * value
   * * address_id
   */
  CustomerFormFieldValuePUT: {
    parameters: {
      body: {
        body?: (
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              customer_id: number;
            })
          | ({
              /** The form field name. */
              name: string;
              value: string | number | string[];
            } & {
              /** The Customer Address ID. */
              address_id: number;
            })
        )[];
      };
    };
    responses: {
      200: responses["FormFieldValueCollectionResponse"];
      /** The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        schema: {
          /** The HTTP status code. */
          status?: number;
          /** The error title describing the particular error. */
          title?: string;
          type?: string;
          instance?: string;
          errors?: { [key: string]: string };
        };
      };
    };
  };
  /** Gets the customer consent. */
  CustomersConsentByCustomerId_GET: {
    parameters: {
      path: {
        customerId: unknown;
      };
    };
    responses: {
      200: responses["consent_Resp"];
      /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: {
        schema: definitions["ErrorResponse"];
      };
      /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** Invalid JSON request body - missing or invalid data. */
      422: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Updates the customer consent. */
  CustomersConsentByCustomerId_PUT: {
    parameters: {
      header: {
        "Content-Type"?: unknown;
      };
      body: {
        body?: definitions["DeclareCustomerConsentRequest"];
      };
      path: {
        customerId: unknown;
      };
    };
    responses: {
      200: responses["consent_Resp"];
      /** Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: {
        schema: definitions["ErrorResponse"];
      };
      /** Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** Invalid JSON request body - missing or invalid data. */
      422: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
}
